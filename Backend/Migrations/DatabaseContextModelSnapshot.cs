// <auto-generated />
using System;
using Backend.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.1");

            modelBuilder.Entity("Backend.Domain.Models.BaseEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BaseEntity");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DeveloperProject", b =>
                {
                    b.Property<long>("DevelopersId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("StarredProjectsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DevelopersId", "StarredProjectsId");

                    b.HasIndex("StarredProjectsId");

                    b.ToTable("DeveloperProject");
                });

            modelBuilder.Entity("Backend.Domain.Models.Branch", b =>
                {
                    b.HasBaseType("Backend.Domain.Models.BaseEntity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Branch");
                });

            modelBuilder.Entity("Backend.Domain.Models.Comment", b =>
                {
                    b.HasBaseType("Backend.Domain.Models.BaseEntity");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("DeveloperId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("IssueId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PullRequestId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ReactionId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("DeveloperId");

                    b.HasIndex("IssueId");

                    b.HasIndex("PullRequestId");

                    b.HasIndex("ReactionId");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("IssueId")
                                .HasColumnName("Comment_IssueId");

                            t.Property("PullRequestId")
                                .HasColumnName("Comment_PullRequestId");

                            t.Property("ReactionId")
                                .HasColumnName("Comment_ReactionId");
                        });

                    b.HasDiscriminator().HasValue("Comment");
                });

            modelBuilder.Entity("Backend.Domain.Models.Developer", b =>
                {
                    b.HasBaseType("Backend.Domain.Models.BaseEntity");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("Developer");
                });

            modelBuilder.Entity("Backend.Domain.Models.Event", b =>
                {
                    b.HasBaseType("Backend.Domain.Models.BaseEntity");

                    b.Property<long>("IssueId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MilestoneId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PullRequestId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ReactionId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Time")
                        .HasColumnType("TEXT");

                    b.HasIndex("IssueId");

                    b.HasIndex("MilestoneId");

                    b.HasIndex("PullRequestId");

                    b.HasIndex("ReactionId");

                    b.HasDiscriminator().HasValue("Event");
                });

            modelBuilder.Entity("Backend.Domain.Models.Issue", b =>
                {
                    b.HasBaseType("Backend.Domain.Models.BaseEntity");

                    b.Property<long?>("DeveloperId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MilestoneId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("DeveloperId");

                    b.HasIndex("MilestoneId");

                    b.HasIndex("ProjectId");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("DeveloperId")
                                .HasColumnName("Issue_DeveloperId");

                            t.Property("MilestoneId")
                                .HasColumnName("Issue_MilestoneId");
                        });

                    b.HasDiscriminator().HasValue("Issue");
                });

            modelBuilder.Entity("Backend.Domain.Models.Milestone", b =>
                {
                    b.HasBaseType("Backend.Domain.Models.BaseEntity");

                    b.Property<long>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasIndex("ProjectId");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("ProjectId")
                                .HasColumnName("Milestone_ProjectId");
                        });

                    b.HasDiscriminator().HasValue("Milestone");
                });

            modelBuilder.Entity("Backend.Domain.Models.Project", b =>
                {
                    b.HasBaseType("Backend.Domain.Models.BaseEntity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("License")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Visibility")
                        .HasColumnType("INTEGER");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("Title")
                                .HasColumnName("Project_Title");
                        });

                    b.HasDiscriminator().HasValue("Project");
                });

            modelBuilder.Entity("Backend.Domain.Models.PullRequest", b =>
                {
                    b.HasBaseType("Backend.Domain.Models.BaseEntity");

                    b.Property<long?>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SourceBranchId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TargetBranchId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SourceBranchId");

                    b.HasIndex("TargetBranchId");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("ProjectId")
                                .HasColumnName("PullRequest_ProjectId");
                        });

                    b.HasDiscriminator().HasValue("PullRequest");
                });

            modelBuilder.Entity("Backend.Domain.Models.Reaction", b =>
                {
                    b.HasBaseType("Backend.Domain.Models.BaseEntity");

                    b.Property<long?>("DeveloperId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("IssueId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("PullRequestId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasIndex("DeveloperId");

                    b.HasIndex("IssueId");

                    b.HasIndex("PullRequestId");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("DeveloperId")
                                .HasColumnName("Reaction_DeveloperId");

                            t.Property("IssueId")
                                .HasColumnName("Reaction_IssueId");

                            t.Property("PullRequestId")
                                .HasColumnName("Reaction_PullRequestId");
                        });

                    b.HasDiscriminator().HasValue("Reaction");
                });

            modelBuilder.Entity("Backend.Domain.Models.CloseEvent", b =>
                {
                    b.HasBaseType("Backend.Domain.Models.Event");

                    b.HasDiscriminator().HasValue("CloseEvent");
                });

            modelBuilder.Entity("Backend.Domain.Models.CreateEvent", b =>
                {
                    b.HasBaseType("Backend.Domain.Models.Event");

                    b.HasDiscriminator().HasValue("CreateEvent");
                });

            modelBuilder.Entity("Backend.Domain.Models.DeleteEvent", b =>
                {
                    b.HasBaseType("Backend.Domain.Models.Event");

                    b.HasDiscriminator().HasValue("DeleteEvent");
                });

            modelBuilder.Entity("Backend.Domain.Models.OpenEvent", b =>
                {
                    b.HasBaseType("Backend.Domain.Models.Event");

                    b.HasDiscriminator().HasValue("OpenEvent");
                });

            modelBuilder.Entity("Backend.Domain.Models.UpdateEvent", b =>
                {
                    b.HasBaseType("Backend.Domain.Models.Event");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NewContent")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OldContent")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("UpdateEvent");
                });

            modelBuilder.Entity("DeveloperProject", b =>
                {
                    b.HasOne("Backend.Domain.Models.Developer", null)
                        .WithMany()
                        .HasForeignKey("DevelopersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("StarredProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Models.Comment", b =>
                {
                    b.HasOne("Backend.Domain.Models.Developer", "Developer")
                        .WithMany("Comments")
                        .HasForeignKey("DeveloperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Models.Issue", "Issue")
                        .WithMany("Comments")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Models.PullRequest", "PullRequest")
                        .WithMany("Comments")
                        .HasForeignKey("PullRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Models.Reaction", "Reaction")
                        .WithMany("Comments")
                        .HasForeignKey("ReactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Developer");

                    b.Navigation("Issue");

                    b.Navigation("PullRequest");

                    b.Navigation("Reaction");
                });

            modelBuilder.Entity("Backend.Domain.Models.Event", b =>
                {
                    b.HasOne("Backend.Domain.Models.Issue", "Issue")
                        .WithMany("Events")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Models.Milestone", "Milestone")
                        .WithMany("Events")
                        .HasForeignKey("MilestoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Models.PullRequest", "PullRequest")
                        .WithMany("Events")
                        .HasForeignKey("PullRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Models.Reaction", "Reaction")
                        .WithMany("Events")
                        .HasForeignKey("ReactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Issue");

                    b.Navigation("Milestone");

                    b.Navigation("PullRequest");

                    b.Navigation("Reaction");
                });

            modelBuilder.Entity("Backend.Domain.Models.Issue", b =>
                {
                    b.HasOne("Backend.Domain.Models.Developer", null)
                        .WithMany("AssignedIssues")
                        .HasForeignKey("DeveloperId");

                    b.HasOne("Backend.Domain.Models.Milestone", "Milestone")
                        .WithMany("Issues")
                        .HasForeignKey("MilestoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Models.Project", null)
                        .WithMany("Issues")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Milestone");
                });

            modelBuilder.Entity("Backend.Domain.Models.Milestone", b =>
                {
                    b.HasOne("Backend.Domain.Models.Project", "Project")
                        .WithMany("Milestones")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Backend.Domain.Models.PullRequest", b =>
                {
                    b.HasOne("Backend.Domain.Models.Project", null)
                        .WithMany("PullRequests")
                        .HasForeignKey("ProjectId");

                    b.HasOne("Backend.Domain.Models.Branch", "SourceBranch")
                        .WithMany()
                        .HasForeignKey("SourceBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Models.Branch", "TargetBranch")
                        .WithMany()
                        .HasForeignKey("TargetBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SourceBranch");

                    b.Navigation("TargetBranch");
                });

            modelBuilder.Entity("Backend.Domain.Models.Reaction", b =>
                {
                    b.HasOne("Backend.Domain.Models.Developer", null)
                        .WithMany("Reactions")
                        .HasForeignKey("DeveloperId");

                    b.HasOne("Backend.Domain.Models.Issue", null)
                        .WithMany("Reactions")
                        .HasForeignKey("IssueId");

                    b.HasOne("Backend.Domain.Models.PullRequest", null)
                        .WithMany("Reactions")
                        .HasForeignKey("PullRequestId");
                });

            modelBuilder.Entity("Backend.Domain.Models.Developer", b =>
                {
                    b.Navigation("AssignedIssues");

                    b.Navigation("Comments");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("Backend.Domain.Models.Issue", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Events");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("Backend.Domain.Models.Milestone", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Issues");
                });

            modelBuilder.Entity("Backend.Domain.Models.Project", b =>
                {
                    b.Navigation("Issues");

                    b.Navigation("Milestones");

                    b.Navigation("PullRequests");
                });

            modelBuilder.Entity("Backend.Domain.Models.PullRequest", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Events");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("Backend.Domain.Models.Reaction", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
